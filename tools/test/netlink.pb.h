// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: netlink.proto

#ifndef PROTOBUF_netlink_2eproto__INCLUDED
#define PROTOBUF_netlink_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3005001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/service.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace protobuf_netlink_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[14];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
void InitDefaultsInet4AddressImpl();
void InitDefaultsInet4Address();
void InitDefaultsInet6AddressImpl();
void InitDefaultsInet6Address();
void InitDefaultsAddressImpl();
void InitDefaultsAddress();
void InitDefaultsVirtualServerAddressImpl();
void InitDefaultsVirtualServerAddress();
void InitDefaultsVirtualServerConfigImpl();
void InitDefaultsVirtualServerConfig();
void InitDefaultsMemberAddressImpl();
void InitDefaultsMemberAddress();
void InitDefaultsMemberConfigImpl();
void InitDefaultsMemberConfig();
void InitDefaultsCreateVirtualServerRequestImpl();
void InitDefaultsCreateVirtualServerRequest();
void InitDefaultsUpdateVirtualServerRequestImpl();
void InitDefaultsUpdateVirtualServerRequest();
void InitDefaultsDeleteVirtualServerRequestImpl();
void InitDefaultsDeleteVirtualServerRequest();
void InitDefaultsAddMemberRequestImpl();
void InitDefaultsAddMemberRequest();
void InitDefaultsRemoveMemberRequestImpl();
void InitDefaultsRemoveMemberRequest();
void InitDefaultsChangeMemberRequestImpl();
void InitDefaultsChangeMemberRequest();
void InitDefaultsStatusImpl();
void InitDefaultsStatus();
inline void InitDefaults() {
  InitDefaultsInet4Address();
  InitDefaultsInet6Address();
  InitDefaultsAddress();
  InitDefaultsVirtualServerAddress();
  InitDefaultsVirtualServerConfig();
  InitDefaultsMemberAddress();
  InitDefaultsMemberConfig();
  InitDefaultsCreateVirtualServerRequest();
  InitDefaultsUpdateVirtualServerRequest();
  InitDefaultsDeleteVirtualServerRequest();
  InitDefaultsAddMemberRequest();
  InitDefaultsRemoveMemberRequest();
  InitDefaultsChangeMemberRequest();
  InitDefaultsStatus();
}
}  // namespace protobuf_netlink_2eproto
namespace clb {
class AddMemberRequest;
class AddMemberRequestDefaultTypeInternal;
extern AddMemberRequestDefaultTypeInternal _AddMemberRequest_default_instance_;
class Address;
class AddressDefaultTypeInternal;
extern AddressDefaultTypeInternal _Address_default_instance_;
class ChangeMemberRequest;
class ChangeMemberRequestDefaultTypeInternal;
extern ChangeMemberRequestDefaultTypeInternal _ChangeMemberRequest_default_instance_;
class CreateVirtualServerRequest;
class CreateVirtualServerRequestDefaultTypeInternal;
extern CreateVirtualServerRequestDefaultTypeInternal _CreateVirtualServerRequest_default_instance_;
class DeleteVirtualServerRequest;
class DeleteVirtualServerRequestDefaultTypeInternal;
extern DeleteVirtualServerRequestDefaultTypeInternal _DeleteVirtualServerRequest_default_instance_;
class Inet4Address;
class Inet4AddressDefaultTypeInternal;
extern Inet4AddressDefaultTypeInternal _Inet4Address_default_instance_;
class Inet6Address;
class Inet6AddressDefaultTypeInternal;
extern Inet6AddressDefaultTypeInternal _Inet6Address_default_instance_;
class MemberAddress;
class MemberAddressDefaultTypeInternal;
extern MemberAddressDefaultTypeInternal _MemberAddress_default_instance_;
class MemberConfig;
class MemberConfigDefaultTypeInternal;
extern MemberConfigDefaultTypeInternal _MemberConfig_default_instance_;
class RemoveMemberRequest;
class RemoveMemberRequestDefaultTypeInternal;
extern RemoveMemberRequestDefaultTypeInternal _RemoveMemberRequest_default_instance_;
class Status;
class StatusDefaultTypeInternal;
extern StatusDefaultTypeInternal _Status_default_instance_;
class UpdateVirtualServerRequest;
class UpdateVirtualServerRequestDefaultTypeInternal;
extern UpdateVirtualServerRequestDefaultTypeInternal _UpdateVirtualServerRequest_default_instance_;
class VirtualServerAddress;
class VirtualServerAddressDefaultTypeInternal;
extern VirtualServerAddressDefaultTypeInternal _VirtualServerAddress_default_instance_;
class VirtualServerConfig;
class VirtualServerConfigDefaultTypeInternal;
extern VirtualServerConfigDefaultTypeInternal _VirtualServerConfig_default_instance_;
}  // namespace clb
namespace clb {

enum SocketType {
  SOCK_STREAM = 0,
  SOCK_DGRAM = 1,
  SocketType_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  SocketType_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool SocketType_IsValid(int value);
const SocketType SocketType_MIN = SOCK_STREAM;
const SocketType SocketType_MAX = SOCK_DGRAM;
const int SocketType_ARRAYSIZE = SocketType_MAX + 1;

const ::google::protobuf::EnumDescriptor* SocketType_descriptor();
inline const ::std::string& SocketType_Name(SocketType value) {
  return ::google::protobuf::internal::NameOfEnum(
    SocketType_descriptor(), value);
}
inline bool SocketType_Parse(
    const ::std::string& name, SocketType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<SocketType>(
    SocketType_descriptor(), name, value);
}
enum BalancingAlgorithm {
  ROUND_ROBIN = 0,
  RANDOM = 1,
  LEAST_CONN = 2,
  BalancingAlgorithm_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  BalancingAlgorithm_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool BalancingAlgorithm_IsValid(int value);
const BalancingAlgorithm BalancingAlgorithm_MIN = ROUND_ROBIN;
const BalancingAlgorithm BalancingAlgorithm_MAX = LEAST_CONN;
const int BalancingAlgorithm_ARRAYSIZE = BalancingAlgorithm_MAX + 1;

const ::google::protobuf::EnumDescriptor* BalancingAlgorithm_descriptor();
inline const ::std::string& BalancingAlgorithm_Name(BalancingAlgorithm value) {
  return ::google::protobuf::internal::NameOfEnum(
    BalancingAlgorithm_descriptor(), value);
}
inline bool BalancingAlgorithm_Parse(
    const ::std::string& name, BalancingAlgorithm* value) {
  return ::google::protobuf::internal::ParseNamedEnum<BalancingAlgorithm>(
    BalancingAlgorithm_descriptor(), name, value);
}
// ===================================================================

class Inet4Address : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:clb.Inet4Address) */ {
 public:
  Inet4Address();
  virtual ~Inet4Address();

  Inet4Address(const Inet4Address& from);

  inline Inet4Address& operator=(const Inet4Address& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Inet4Address(Inet4Address&& from) noexcept
    : Inet4Address() {
    *this = ::std::move(from);
  }

  inline Inet4Address& operator=(Inet4Address&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Inet4Address& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Inet4Address* internal_default_instance() {
    return reinterpret_cast<const Inet4Address*>(
               &_Inet4Address_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(Inet4Address* other);
  friend void swap(Inet4Address& a, Inet4Address& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Inet4Address* New() const PROTOBUF_FINAL { return New(NULL); }

  Inet4Address* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Inet4Address& from);
  void MergeFrom(const Inet4Address& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Inet4Address* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // uint32 addr = 1;
  void clear_addr();
  static const int kAddrFieldNumber = 1;
  ::google::protobuf::uint32 addr() const;
  void set_addr(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:clb.Inet4Address)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 addr_;
  mutable int _cached_size_;
  friend struct ::protobuf_netlink_2eproto::TableStruct;
  friend void ::protobuf_netlink_2eproto::InitDefaultsInet4AddressImpl();
};
// -------------------------------------------------------------------

class Inet6Address : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:clb.Inet6Address) */ {
 public:
  Inet6Address();
  virtual ~Inet6Address();

  Inet6Address(const Inet6Address& from);

  inline Inet6Address& operator=(const Inet6Address& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Inet6Address(Inet6Address&& from) noexcept
    : Inet6Address() {
    *this = ::std::move(from);
  }

  inline Inet6Address& operator=(Inet6Address&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Inet6Address& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Inet6Address* internal_default_instance() {
    return reinterpret_cast<const Inet6Address*>(
               &_Inet6Address_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    1;

  void Swap(Inet6Address* other);
  friend void swap(Inet6Address& a, Inet6Address& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Inet6Address* New() const PROTOBUF_FINAL { return New(NULL); }

  Inet6Address* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Inet6Address& from);
  void MergeFrom(const Inet6Address& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Inet6Address* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // uint64 hi = 1;
  void clear_hi();
  static const int kHiFieldNumber = 1;
  ::google::protobuf::uint64 hi() const;
  void set_hi(::google::protobuf::uint64 value);

  // uint64 lo = 2;
  void clear_lo();
  static const int kLoFieldNumber = 2;
  ::google::protobuf::uint64 lo() const;
  void set_lo(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:clb.Inet6Address)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint64 hi_;
  ::google::protobuf::uint64 lo_;
  mutable int _cached_size_;
  friend struct ::protobuf_netlink_2eproto::TableStruct;
  friend void ::protobuf_netlink_2eproto::InitDefaultsInet6AddressImpl();
};
// -------------------------------------------------------------------

class Address : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:clb.Address) */ {
 public:
  Address();
  virtual ~Address();

  Address(const Address& from);

  inline Address& operator=(const Address& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Address(Address&& from) noexcept
    : Address() {
    *this = ::std::move(from);
  }

  inline Address& operator=(Address&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Address& default_instance();

  enum AddressCase {
    kInet4 = 1,
    kInet6 = 2,
    ADDRESS_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Address* internal_default_instance() {
    return reinterpret_cast<const Address*>(
               &_Address_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    2;

  void Swap(Address* other);
  friend void swap(Address& a, Address& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Address* New() const PROTOBUF_FINAL { return New(NULL); }

  Address* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Address& from);
  void MergeFrom(const Address& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Address* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .clb.Inet4Address inet4 = 1;
  bool has_inet4() const;
  void clear_inet4();
  static const int kInet4FieldNumber = 1;
  const ::clb::Inet4Address& inet4() const;
  ::clb::Inet4Address* release_inet4();
  ::clb::Inet4Address* mutable_inet4();
  void set_allocated_inet4(::clb::Inet4Address* inet4);

  // .clb.Inet6Address inet6 = 2;
  bool has_inet6() const;
  void clear_inet6();
  static const int kInet6FieldNumber = 2;
  const ::clb::Inet6Address& inet6() const;
  ::clb::Inet6Address* release_inet6();
  ::clb::Inet6Address* mutable_inet6();
  void set_allocated_inet6(::clb::Inet6Address* inet6);

  AddressCase address_case() const;
  // @@protoc_insertion_point(class_scope:clb.Address)
 private:
  void set_has_inet4();
  void set_has_inet6();

  inline bool has_address() const;
  void clear_address();
  inline void clear_has_address();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  union AddressUnion {
    AddressUnion() {}
    ::clb::Inet4Address* inet4_;
    ::clb::Inet6Address* inet6_;
  } address_;
  mutable int _cached_size_;
  ::google::protobuf::uint32 _oneof_case_[1];

  friend struct ::protobuf_netlink_2eproto::TableStruct;
  friend void ::protobuf_netlink_2eproto::InitDefaultsAddressImpl();
};
// -------------------------------------------------------------------

class VirtualServerAddress : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:clb.VirtualServerAddress) */ {
 public:
  VirtualServerAddress();
  virtual ~VirtualServerAddress();

  VirtualServerAddress(const VirtualServerAddress& from);

  inline VirtualServerAddress& operator=(const VirtualServerAddress& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  VirtualServerAddress(VirtualServerAddress&& from) noexcept
    : VirtualServerAddress() {
    *this = ::std::move(from);
  }

  inline VirtualServerAddress& operator=(VirtualServerAddress&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const VirtualServerAddress& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const VirtualServerAddress* internal_default_instance() {
    return reinterpret_cast<const VirtualServerAddress*>(
               &_VirtualServerAddress_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    3;

  void Swap(VirtualServerAddress* other);
  friend void swap(VirtualServerAddress& a, VirtualServerAddress& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline VirtualServerAddress* New() const PROTOBUF_FINAL { return New(NULL); }

  VirtualServerAddress* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const VirtualServerAddress& from);
  void MergeFrom(const VirtualServerAddress& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(VirtualServerAddress* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .clb.Address address = 2;
  bool has_address() const;
  void clear_address();
  static const int kAddressFieldNumber = 2;
  const ::clb::Address& address() const;
  ::clb::Address* release_address();
  ::clb::Address* mutable_address();
  void set_allocated_address(::clb::Address* address);

  // .clb.SocketType type = 1;
  void clear_type();
  static const int kTypeFieldNumber = 1;
  ::clb::SocketType type() const;
  void set_type(::clb::SocketType value);

  // uint32 port = 3;
  void clear_port();
  static const int kPortFieldNumber = 3;
  ::google::protobuf::uint32 port() const;
  void set_port(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:clb.VirtualServerAddress)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::clb::Address* address_;
  int type_;
  ::google::protobuf::uint32 port_;
  mutable int _cached_size_;
  friend struct ::protobuf_netlink_2eproto::TableStruct;
  friend void ::protobuf_netlink_2eproto::InitDefaultsVirtualServerAddressImpl();
};
// -------------------------------------------------------------------

class VirtualServerConfig : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:clb.VirtualServerConfig) */ {
 public:
  VirtualServerConfig();
  virtual ~VirtualServerConfig();

  VirtualServerConfig(const VirtualServerConfig& from);

  inline VirtualServerConfig& operator=(const VirtualServerConfig& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  VirtualServerConfig(VirtualServerConfig&& from) noexcept
    : VirtualServerConfig() {
    *this = ::std::move(from);
  }

  inline VirtualServerConfig& operator=(VirtualServerConfig&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const VirtualServerConfig& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const VirtualServerConfig* internal_default_instance() {
    return reinterpret_cast<const VirtualServerConfig*>(
               &_VirtualServerConfig_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    4;

  void Swap(VirtualServerConfig* other);
  friend void swap(VirtualServerConfig& a, VirtualServerConfig& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline VirtualServerConfig* New() const PROTOBUF_FINAL { return New(NULL); }

  VirtualServerConfig* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const VirtualServerConfig& from);
  void MergeFrom(const VirtualServerConfig& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(VirtualServerConfig* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .clb.BalancingAlgorithm algorithm = 1;
  void clear_algorithm();
  static const int kAlgorithmFieldNumber = 1;
  ::clb::BalancingAlgorithm algorithm() const;
  void set_algorithm(::clb::BalancingAlgorithm value);

  // @@protoc_insertion_point(class_scope:clb.VirtualServerConfig)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  int algorithm_;
  mutable int _cached_size_;
  friend struct ::protobuf_netlink_2eproto::TableStruct;
  friend void ::protobuf_netlink_2eproto::InitDefaultsVirtualServerConfigImpl();
};
// -------------------------------------------------------------------

class MemberAddress : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:clb.MemberAddress) */ {
 public:
  MemberAddress();
  virtual ~MemberAddress();

  MemberAddress(const MemberAddress& from);

  inline MemberAddress& operator=(const MemberAddress& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  MemberAddress(MemberAddress&& from) noexcept
    : MemberAddress() {
    *this = ::std::move(from);
  }

  inline MemberAddress& operator=(MemberAddress&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const MemberAddress& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MemberAddress* internal_default_instance() {
    return reinterpret_cast<const MemberAddress*>(
               &_MemberAddress_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    5;

  void Swap(MemberAddress* other);
  friend void swap(MemberAddress& a, MemberAddress& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline MemberAddress* New() const PROTOBUF_FINAL { return New(NULL); }

  MemberAddress* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const MemberAddress& from);
  void MergeFrom(const MemberAddress& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(MemberAddress* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .clb.Address address = 1;
  bool has_address() const;
  void clear_address();
  static const int kAddressFieldNumber = 1;
  const ::clb::Address& address() const;
  ::clb::Address* release_address();
  ::clb::Address* mutable_address();
  void set_allocated_address(::clb::Address* address);

  // uint32 port = 2;
  void clear_port();
  static const int kPortFieldNumber = 2;
  ::google::protobuf::uint32 port() const;
  void set_port(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:clb.MemberAddress)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::clb::Address* address_;
  ::google::protobuf::uint32 port_;
  mutable int _cached_size_;
  friend struct ::protobuf_netlink_2eproto::TableStruct;
  friend void ::protobuf_netlink_2eproto::InitDefaultsMemberAddressImpl();
};
// -------------------------------------------------------------------

class MemberConfig : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:clb.MemberConfig) */ {
 public:
  MemberConfig();
  virtual ~MemberConfig();

  MemberConfig(const MemberConfig& from);

  inline MemberConfig& operator=(const MemberConfig& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  MemberConfig(MemberConfig&& from) noexcept
    : MemberConfig() {
    *this = ::std::move(from);
  }

  inline MemberConfig& operator=(MemberConfig&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const MemberConfig& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MemberConfig* internal_default_instance() {
    return reinterpret_cast<const MemberConfig*>(
               &_MemberConfig_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    6;

  void Swap(MemberConfig* other);
  friend void swap(MemberConfig& a, MemberConfig& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline MemberConfig* New() const PROTOBUF_FINAL { return New(NULL); }

  MemberConfig* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const MemberConfig& from);
  void MergeFrom(const MemberConfig& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(MemberConfig* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // float weight = 1;
  void clear_weight();
  static const int kWeightFieldNumber = 1;
  float weight() const;
  void set_weight(float value);

  // @@protoc_insertion_point(class_scope:clb.MemberConfig)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  float weight_;
  mutable int _cached_size_;
  friend struct ::protobuf_netlink_2eproto::TableStruct;
  friend void ::protobuf_netlink_2eproto::InitDefaultsMemberConfigImpl();
};
// -------------------------------------------------------------------

class CreateVirtualServerRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:clb.CreateVirtualServerRequest) */ {
 public:
  CreateVirtualServerRequest();
  virtual ~CreateVirtualServerRequest();

  CreateVirtualServerRequest(const CreateVirtualServerRequest& from);

  inline CreateVirtualServerRequest& operator=(const CreateVirtualServerRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CreateVirtualServerRequest(CreateVirtualServerRequest&& from) noexcept
    : CreateVirtualServerRequest() {
    *this = ::std::move(from);
  }

  inline CreateVirtualServerRequest& operator=(CreateVirtualServerRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const CreateVirtualServerRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CreateVirtualServerRequest* internal_default_instance() {
    return reinterpret_cast<const CreateVirtualServerRequest*>(
               &_CreateVirtualServerRequest_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    7;

  void Swap(CreateVirtualServerRequest* other);
  friend void swap(CreateVirtualServerRequest& a, CreateVirtualServerRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CreateVirtualServerRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  CreateVirtualServerRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const CreateVirtualServerRequest& from);
  void MergeFrom(const CreateVirtualServerRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(CreateVirtualServerRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .clb.VirtualServerAddress address = 1;
  bool has_address() const;
  void clear_address();
  static const int kAddressFieldNumber = 1;
  const ::clb::VirtualServerAddress& address() const;
  ::clb::VirtualServerAddress* release_address();
  ::clb::VirtualServerAddress* mutable_address();
  void set_allocated_address(::clb::VirtualServerAddress* address);

  // .clb.VirtualServerConfig config = 2;
  bool has_config() const;
  void clear_config();
  static const int kConfigFieldNumber = 2;
  const ::clb::VirtualServerConfig& config() const;
  ::clb::VirtualServerConfig* release_config();
  ::clb::VirtualServerConfig* mutable_config();
  void set_allocated_config(::clb::VirtualServerConfig* config);

  // @@protoc_insertion_point(class_scope:clb.CreateVirtualServerRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::clb::VirtualServerAddress* address_;
  ::clb::VirtualServerConfig* config_;
  mutable int _cached_size_;
  friend struct ::protobuf_netlink_2eproto::TableStruct;
  friend void ::protobuf_netlink_2eproto::InitDefaultsCreateVirtualServerRequestImpl();
};
// -------------------------------------------------------------------

class UpdateVirtualServerRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:clb.UpdateVirtualServerRequest) */ {
 public:
  UpdateVirtualServerRequest();
  virtual ~UpdateVirtualServerRequest();

  UpdateVirtualServerRequest(const UpdateVirtualServerRequest& from);

  inline UpdateVirtualServerRequest& operator=(const UpdateVirtualServerRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  UpdateVirtualServerRequest(UpdateVirtualServerRequest&& from) noexcept
    : UpdateVirtualServerRequest() {
    *this = ::std::move(from);
  }

  inline UpdateVirtualServerRequest& operator=(UpdateVirtualServerRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const UpdateVirtualServerRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UpdateVirtualServerRequest* internal_default_instance() {
    return reinterpret_cast<const UpdateVirtualServerRequest*>(
               &_UpdateVirtualServerRequest_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    8;

  void Swap(UpdateVirtualServerRequest* other);
  friend void swap(UpdateVirtualServerRequest& a, UpdateVirtualServerRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline UpdateVirtualServerRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  UpdateVirtualServerRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const UpdateVirtualServerRequest& from);
  void MergeFrom(const UpdateVirtualServerRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(UpdateVirtualServerRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .clb.VirtualServerAddress address = 1;
  bool has_address() const;
  void clear_address();
  static const int kAddressFieldNumber = 1;
  const ::clb::VirtualServerAddress& address() const;
  ::clb::VirtualServerAddress* release_address();
  ::clb::VirtualServerAddress* mutable_address();
  void set_allocated_address(::clb::VirtualServerAddress* address);

  // .clb.VirtualServerConfig config = 2;
  bool has_config() const;
  void clear_config();
  static const int kConfigFieldNumber = 2;
  const ::clb::VirtualServerConfig& config() const;
  ::clb::VirtualServerConfig* release_config();
  ::clb::VirtualServerConfig* mutable_config();
  void set_allocated_config(::clb::VirtualServerConfig* config);

  // @@protoc_insertion_point(class_scope:clb.UpdateVirtualServerRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::clb::VirtualServerAddress* address_;
  ::clb::VirtualServerConfig* config_;
  mutable int _cached_size_;
  friend struct ::protobuf_netlink_2eproto::TableStruct;
  friend void ::protobuf_netlink_2eproto::InitDefaultsUpdateVirtualServerRequestImpl();
};
// -------------------------------------------------------------------

class DeleteVirtualServerRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:clb.DeleteVirtualServerRequest) */ {
 public:
  DeleteVirtualServerRequest();
  virtual ~DeleteVirtualServerRequest();

  DeleteVirtualServerRequest(const DeleteVirtualServerRequest& from);

  inline DeleteVirtualServerRequest& operator=(const DeleteVirtualServerRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  DeleteVirtualServerRequest(DeleteVirtualServerRequest&& from) noexcept
    : DeleteVirtualServerRequest() {
    *this = ::std::move(from);
  }

  inline DeleteVirtualServerRequest& operator=(DeleteVirtualServerRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const DeleteVirtualServerRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DeleteVirtualServerRequest* internal_default_instance() {
    return reinterpret_cast<const DeleteVirtualServerRequest*>(
               &_DeleteVirtualServerRequest_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    9;

  void Swap(DeleteVirtualServerRequest* other);
  friend void swap(DeleteVirtualServerRequest& a, DeleteVirtualServerRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DeleteVirtualServerRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  DeleteVirtualServerRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const DeleteVirtualServerRequest& from);
  void MergeFrom(const DeleteVirtualServerRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(DeleteVirtualServerRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .clb.VirtualServerAddress address = 1;
  bool has_address() const;
  void clear_address();
  static const int kAddressFieldNumber = 1;
  const ::clb::VirtualServerAddress& address() const;
  ::clb::VirtualServerAddress* release_address();
  ::clb::VirtualServerAddress* mutable_address();
  void set_allocated_address(::clb::VirtualServerAddress* address);

  // @@protoc_insertion_point(class_scope:clb.DeleteVirtualServerRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::clb::VirtualServerAddress* address_;
  mutable int _cached_size_;
  friend struct ::protobuf_netlink_2eproto::TableStruct;
  friend void ::protobuf_netlink_2eproto::InitDefaultsDeleteVirtualServerRequestImpl();
};
// -------------------------------------------------------------------

class AddMemberRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:clb.AddMemberRequest) */ {
 public:
  AddMemberRequest();
  virtual ~AddMemberRequest();

  AddMemberRequest(const AddMemberRequest& from);

  inline AddMemberRequest& operator=(const AddMemberRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  AddMemberRequest(AddMemberRequest&& from) noexcept
    : AddMemberRequest() {
    *this = ::std::move(from);
  }

  inline AddMemberRequest& operator=(AddMemberRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const AddMemberRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AddMemberRequest* internal_default_instance() {
    return reinterpret_cast<const AddMemberRequest*>(
               &_AddMemberRequest_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    10;

  void Swap(AddMemberRequest* other);
  friend void swap(AddMemberRequest& a, AddMemberRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline AddMemberRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  AddMemberRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const AddMemberRequest& from);
  void MergeFrom(const AddMemberRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(AddMemberRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .clb.VirtualServerAddress server = 1;
  bool has_server() const;
  void clear_server();
  static const int kServerFieldNumber = 1;
  const ::clb::VirtualServerAddress& server() const;
  ::clb::VirtualServerAddress* release_server();
  ::clb::VirtualServerAddress* mutable_server();
  void set_allocated_server(::clb::VirtualServerAddress* server);

  // .clb.MemberAddress member = 2;
  bool has_member() const;
  void clear_member();
  static const int kMemberFieldNumber = 2;
  const ::clb::MemberAddress& member() const;
  ::clb::MemberAddress* release_member();
  ::clb::MemberAddress* mutable_member();
  void set_allocated_member(::clb::MemberAddress* member);

  // .clb.MemberConfig config = 3;
  bool has_config() const;
  void clear_config();
  static const int kConfigFieldNumber = 3;
  const ::clb::MemberConfig& config() const;
  ::clb::MemberConfig* release_config();
  ::clb::MemberConfig* mutable_config();
  void set_allocated_config(::clb::MemberConfig* config);

  // @@protoc_insertion_point(class_scope:clb.AddMemberRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::clb::VirtualServerAddress* server_;
  ::clb::MemberAddress* member_;
  ::clb::MemberConfig* config_;
  mutable int _cached_size_;
  friend struct ::protobuf_netlink_2eproto::TableStruct;
  friend void ::protobuf_netlink_2eproto::InitDefaultsAddMemberRequestImpl();
};
// -------------------------------------------------------------------

class RemoveMemberRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:clb.RemoveMemberRequest) */ {
 public:
  RemoveMemberRequest();
  virtual ~RemoveMemberRequest();

  RemoveMemberRequest(const RemoveMemberRequest& from);

  inline RemoveMemberRequest& operator=(const RemoveMemberRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  RemoveMemberRequest(RemoveMemberRequest&& from) noexcept
    : RemoveMemberRequest() {
    *this = ::std::move(from);
  }

  inline RemoveMemberRequest& operator=(RemoveMemberRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const RemoveMemberRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RemoveMemberRequest* internal_default_instance() {
    return reinterpret_cast<const RemoveMemberRequest*>(
               &_RemoveMemberRequest_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    11;

  void Swap(RemoveMemberRequest* other);
  friend void swap(RemoveMemberRequest& a, RemoveMemberRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline RemoveMemberRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  RemoveMemberRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const RemoveMemberRequest& from);
  void MergeFrom(const RemoveMemberRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(RemoveMemberRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .clb.VirtualServerAddress server = 1;
  bool has_server() const;
  void clear_server();
  static const int kServerFieldNumber = 1;
  const ::clb::VirtualServerAddress& server() const;
  ::clb::VirtualServerAddress* release_server();
  ::clb::VirtualServerAddress* mutable_server();
  void set_allocated_server(::clb::VirtualServerAddress* server);

  // .clb.MemberAddress member = 2;
  bool has_member() const;
  void clear_member();
  static const int kMemberFieldNumber = 2;
  const ::clb::MemberAddress& member() const;
  ::clb::MemberAddress* release_member();
  ::clb::MemberAddress* mutable_member();
  void set_allocated_member(::clb::MemberAddress* member);

  // @@protoc_insertion_point(class_scope:clb.RemoveMemberRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::clb::VirtualServerAddress* server_;
  ::clb::MemberAddress* member_;
  mutable int _cached_size_;
  friend struct ::protobuf_netlink_2eproto::TableStruct;
  friend void ::protobuf_netlink_2eproto::InitDefaultsRemoveMemberRequestImpl();
};
// -------------------------------------------------------------------

class ChangeMemberRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:clb.ChangeMemberRequest) */ {
 public:
  ChangeMemberRequest();
  virtual ~ChangeMemberRequest();

  ChangeMemberRequest(const ChangeMemberRequest& from);

  inline ChangeMemberRequest& operator=(const ChangeMemberRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ChangeMemberRequest(ChangeMemberRequest&& from) noexcept
    : ChangeMemberRequest() {
    *this = ::std::move(from);
  }

  inline ChangeMemberRequest& operator=(ChangeMemberRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ChangeMemberRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ChangeMemberRequest* internal_default_instance() {
    return reinterpret_cast<const ChangeMemberRequest*>(
               &_ChangeMemberRequest_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    12;

  void Swap(ChangeMemberRequest* other);
  friend void swap(ChangeMemberRequest& a, ChangeMemberRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ChangeMemberRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  ChangeMemberRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ChangeMemberRequest& from);
  void MergeFrom(const ChangeMemberRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ChangeMemberRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .clb.VirtualServerAddress server = 1;
  bool has_server() const;
  void clear_server();
  static const int kServerFieldNumber = 1;
  const ::clb::VirtualServerAddress& server() const;
  ::clb::VirtualServerAddress* release_server();
  ::clb::VirtualServerAddress* mutable_server();
  void set_allocated_server(::clb::VirtualServerAddress* server);

  // .clb.MemberAddress member = 2;
  bool has_member() const;
  void clear_member();
  static const int kMemberFieldNumber = 2;
  const ::clb::MemberAddress& member() const;
  ::clb::MemberAddress* release_member();
  ::clb::MemberAddress* mutable_member();
  void set_allocated_member(::clb::MemberAddress* member);

  // .clb.MemberConfig config = 3;
  bool has_config() const;
  void clear_config();
  static const int kConfigFieldNumber = 3;
  const ::clb::MemberConfig& config() const;
  ::clb::MemberConfig* release_config();
  ::clb::MemberConfig* mutable_config();
  void set_allocated_config(::clb::MemberConfig* config);

  // @@protoc_insertion_point(class_scope:clb.ChangeMemberRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::clb::VirtualServerAddress* server_;
  ::clb::MemberAddress* member_;
  ::clb::MemberConfig* config_;
  mutable int _cached_size_;
  friend struct ::protobuf_netlink_2eproto::TableStruct;
  friend void ::protobuf_netlink_2eproto::InitDefaultsChangeMemberRequestImpl();
};
// -------------------------------------------------------------------

class Status : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:clb.Status) */ {
 public:
  Status();
  virtual ~Status();

  Status(const Status& from);

  inline Status& operator=(const Status& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Status(Status&& from) noexcept
    : Status() {
    *this = ::std::move(from);
  }

  inline Status& operator=(Status&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Status& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Status* internal_default_instance() {
    return reinterpret_cast<const Status*>(
               &_Status_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    13;

  void Swap(Status* other);
  friend void swap(Status& a, Status& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Status* New() const PROTOBUF_FINAL { return New(NULL); }

  Status* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Status& from);
  void MergeFrom(const Status& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Status* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // uint32 code = 1;
  void clear_code();
  static const int kCodeFieldNumber = 1;
  ::google::protobuf::uint32 code() const;
  void set_code(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:clb.Status)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 code_;
  mutable int _cached_size_;
  friend struct ::protobuf_netlink_2eproto::TableStruct;
  friend void ::protobuf_netlink_2eproto::InitDefaultsStatusImpl();
};
// ===================================================================

class Clb_Stub;

class Clb : public ::google::protobuf::Service {
 protected:
  // This class should be treated as an abstract interface.
  inline Clb() {};
 public:
  virtual ~Clb();

  typedef Clb_Stub Stub;

  static const ::google::protobuf::ServiceDescriptor* descriptor();

  virtual void CreateVirtualServer(::google::protobuf::RpcController* controller,
                       const ::clb::CreateVirtualServerRequest* request,
                       ::clb::Status* response,
                       ::google::protobuf::Closure* done);
  virtual void UpdateVirtualServer(::google::protobuf::RpcController* controller,
                       const ::clb::UpdateVirtualServerRequest* request,
                       ::clb::Status* response,
                       ::google::protobuf::Closure* done);
  virtual void DeleteVirtualServer(::google::protobuf::RpcController* controller,
                       const ::clb::DeleteVirtualServerRequest* request,
                       ::clb::Status* response,
                       ::google::protobuf::Closure* done);
  virtual void AddMember(::google::protobuf::RpcController* controller,
                       const ::clb::AddMemberRequest* request,
                       ::clb::Status* response,
                       ::google::protobuf::Closure* done);
  virtual void ChangeMember(::google::protobuf::RpcController* controller,
                       const ::clb::ChangeMemberRequest* request,
                       ::clb::Status* response,
                       ::google::protobuf::Closure* done);
  virtual void RemoveMember(::google::protobuf::RpcController* controller,
                       const ::clb::RemoveMemberRequest* request,
                       ::clb::Status* response,
                       ::google::protobuf::Closure* done);

  // implements Service ----------------------------------------------

  const ::google::protobuf::ServiceDescriptor* GetDescriptor();
  void CallMethod(const ::google::protobuf::MethodDescriptor* method,
                  ::google::protobuf::RpcController* controller,
                  const ::google::protobuf::Message* request,
                  ::google::protobuf::Message* response,
                  ::google::protobuf::Closure* done);
  const ::google::protobuf::Message& GetRequestPrototype(
    const ::google::protobuf::MethodDescriptor* method) const;
  const ::google::protobuf::Message& GetResponsePrototype(
    const ::google::protobuf::MethodDescriptor* method) const;

 private:
  GOOGLE_DISALLOW_EVIL_CONSTRUCTORS(Clb);
};

class Clb_Stub : public Clb {
 public:
  Clb_Stub(::google::protobuf::RpcChannel* channel);
  Clb_Stub(::google::protobuf::RpcChannel* channel,
                   ::google::protobuf::Service::ChannelOwnership ownership);
  ~Clb_Stub();

  inline ::google::protobuf::RpcChannel* channel() { return channel_; }

  // implements Clb ------------------------------------------

  void CreateVirtualServer(::google::protobuf::RpcController* controller,
                       const ::clb::CreateVirtualServerRequest* request,
                       ::clb::Status* response,
                       ::google::protobuf::Closure* done);
  void UpdateVirtualServer(::google::protobuf::RpcController* controller,
                       const ::clb::UpdateVirtualServerRequest* request,
                       ::clb::Status* response,
                       ::google::protobuf::Closure* done);
  void DeleteVirtualServer(::google::protobuf::RpcController* controller,
                       const ::clb::DeleteVirtualServerRequest* request,
                       ::clb::Status* response,
                       ::google::protobuf::Closure* done);
  void AddMember(::google::protobuf::RpcController* controller,
                       const ::clb::AddMemberRequest* request,
                       ::clb::Status* response,
                       ::google::protobuf::Closure* done);
  void ChangeMember(::google::protobuf::RpcController* controller,
                       const ::clb::ChangeMemberRequest* request,
                       ::clb::Status* response,
                       ::google::protobuf::Closure* done);
  void RemoveMember(::google::protobuf::RpcController* controller,
                       const ::clb::RemoveMemberRequest* request,
                       ::clb::Status* response,
                       ::google::protobuf::Closure* done);
 private:
  ::google::protobuf::RpcChannel* channel_;
  bool owns_channel_;
  GOOGLE_DISALLOW_EVIL_CONSTRUCTORS(Clb_Stub);
};


// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Inet4Address

// uint32 addr = 1;
inline void Inet4Address::clear_addr() {
  addr_ = 0u;
}
inline ::google::protobuf::uint32 Inet4Address::addr() const {
  // @@protoc_insertion_point(field_get:clb.Inet4Address.addr)
  return addr_;
}
inline void Inet4Address::set_addr(::google::protobuf::uint32 value) {
  
  addr_ = value;
  // @@protoc_insertion_point(field_set:clb.Inet4Address.addr)
}

// -------------------------------------------------------------------

// Inet6Address

// uint64 hi = 1;
inline void Inet6Address::clear_hi() {
  hi_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 Inet6Address::hi() const {
  // @@protoc_insertion_point(field_get:clb.Inet6Address.hi)
  return hi_;
}
inline void Inet6Address::set_hi(::google::protobuf::uint64 value) {
  
  hi_ = value;
  // @@protoc_insertion_point(field_set:clb.Inet6Address.hi)
}

// uint64 lo = 2;
inline void Inet6Address::clear_lo() {
  lo_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 Inet6Address::lo() const {
  // @@protoc_insertion_point(field_get:clb.Inet6Address.lo)
  return lo_;
}
inline void Inet6Address::set_lo(::google::protobuf::uint64 value) {
  
  lo_ = value;
  // @@protoc_insertion_point(field_set:clb.Inet6Address.lo)
}

// -------------------------------------------------------------------

// Address

// .clb.Inet4Address inet4 = 1;
inline bool Address::has_inet4() const {
  return address_case() == kInet4;
}
inline void Address::set_has_inet4() {
  _oneof_case_[0] = kInet4;
}
inline void Address::clear_inet4() {
  if (has_inet4()) {
    delete address_.inet4_;
    clear_has_address();
  }
}
inline ::clb::Inet4Address* Address::release_inet4() {
  // @@protoc_insertion_point(field_release:clb.Address.inet4)
  if (has_inet4()) {
    clear_has_address();
      ::clb::Inet4Address* temp = address_.inet4_;
    address_.inet4_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::clb::Inet4Address& Address::inet4() const {
  // @@protoc_insertion_point(field_get:clb.Address.inet4)
  return has_inet4()
      ? *address_.inet4_
      : *reinterpret_cast< ::clb::Inet4Address*>(&::clb::_Inet4Address_default_instance_);
}
inline ::clb::Inet4Address* Address::mutable_inet4() {
  if (!has_inet4()) {
    clear_address();
    set_has_inet4();
    address_.inet4_ = new ::clb::Inet4Address;
  }
  // @@protoc_insertion_point(field_mutable:clb.Address.inet4)
  return address_.inet4_;
}

// .clb.Inet6Address inet6 = 2;
inline bool Address::has_inet6() const {
  return address_case() == kInet6;
}
inline void Address::set_has_inet6() {
  _oneof_case_[0] = kInet6;
}
inline void Address::clear_inet6() {
  if (has_inet6()) {
    delete address_.inet6_;
    clear_has_address();
  }
}
inline ::clb::Inet6Address* Address::release_inet6() {
  // @@protoc_insertion_point(field_release:clb.Address.inet6)
  if (has_inet6()) {
    clear_has_address();
      ::clb::Inet6Address* temp = address_.inet6_;
    address_.inet6_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::clb::Inet6Address& Address::inet6() const {
  // @@protoc_insertion_point(field_get:clb.Address.inet6)
  return has_inet6()
      ? *address_.inet6_
      : *reinterpret_cast< ::clb::Inet6Address*>(&::clb::_Inet6Address_default_instance_);
}
inline ::clb::Inet6Address* Address::mutable_inet6() {
  if (!has_inet6()) {
    clear_address();
    set_has_inet6();
    address_.inet6_ = new ::clb::Inet6Address;
  }
  // @@protoc_insertion_point(field_mutable:clb.Address.inet6)
  return address_.inet6_;
}

inline bool Address::has_address() const {
  return address_case() != ADDRESS_NOT_SET;
}
inline void Address::clear_has_address() {
  _oneof_case_[0] = ADDRESS_NOT_SET;
}
inline Address::AddressCase Address::address_case() const {
  return Address::AddressCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// VirtualServerAddress

// .clb.SocketType type = 1;
inline void VirtualServerAddress::clear_type() {
  type_ = 0;
}
inline ::clb::SocketType VirtualServerAddress::type() const {
  // @@protoc_insertion_point(field_get:clb.VirtualServerAddress.type)
  return static_cast< ::clb::SocketType >(type_);
}
inline void VirtualServerAddress::set_type(::clb::SocketType value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:clb.VirtualServerAddress.type)
}

// .clb.Address address = 2;
inline bool VirtualServerAddress::has_address() const {
  return this != internal_default_instance() && address_ != NULL;
}
inline void VirtualServerAddress::clear_address() {
  if (GetArenaNoVirtual() == NULL && address_ != NULL) {
    delete address_;
  }
  address_ = NULL;
}
inline const ::clb::Address& VirtualServerAddress::address() const {
  const ::clb::Address* p = address_;
  // @@protoc_insertion_point(field_get:clb.VirtualServerAddress.address)
  return p != NULL ? *p : *reinterpret_cast<const ::clb::Address*>(
      &::clb::_Address_default_instance_);
}
inline ::clb::Address* VirtualServerAddress::release_address() {
  // @@protoc_insertion_point(field_release:clb.VirtualServerAddress.address)
  
  ::clb::Address* temp = address_;
  address_ = NULL;
  return temp;
}
inline ::clb::Address* VirtualServerAddress::mutable_address() {
  
  if (address_ == NULL) {
    address_ = new ::clb::Address;
  }
  // @@protoc_insertion_point(field_mutable:clb.VirtualServerAddress.address)
  return address_;
}
inline void VirtualServerAddress::set_allocated_address(::clb::Address* address) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete address_;
  }
  if (address) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      address = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, address, submessage_arena);
    }
    
  } else {
    
  }
  address_ = address;
  // @@protoc_insertion_point(field_set_allocated:clb.VirtualServerAddress.address)
}

// uint32 port = 3;
inline void VirtualServerAddress::clear_port() {
  port_ = 0u;
}
inline ::google::protobuf::uint32 VirtualServerAddress::port() const {
  // @@protoc_insertion_point(field_get:clb.VirtualServerAddress.port)
  return port_;
}
inline void VirtualServerAddress::set_port(::google::protobuf::uint32 value) {
  
  port_ = value;
  // @@protoc_insertion_point(field_set:clb.VirtualServerAddress.port)
}

// -------------------------------------------------------------------

// VirtualServerConfig

// .clb.BalancingAlgorithm algorithm = 1;
inline void VirtualServerConfig::clear_algorithm() {
  algorithm_ = 0;
}
inline ::clb::BalancingAlgorithm VirtualServerConfig::algorithm() const {
  // @@protoc_insertion_point(field_get:clb.VirtualServerConfig.algorithm)
  return static_cast< ::clb::BalancingAlgorithm >(algorithm_);
}
inline void VirtualServerConfig::set_algorithm(::clb::BalancingAlgorithm value) {
  
  algorithm_ = value;
  // @@protoc_insertion_point(field_set:clb.VirtualServerConfig.algorithm)
}

// -------------------------------------------------------------------

// MemberAddress

// .clb.Address address = 1;
inline bool MemberAddress::has_address() const {
  return this != internal_default_instance() && address_ != NULL;
}
inline void MemberAddress::clear_address() {
  if (GetArenaNoVirtual() == NULL && address_ != NULL) {
    delete address_;
  }
  address_ = NULL;
}
inline const ::clb::Address& MemberAddress::address() const {
  const ::clb::Address* p = address_;
  // @@protoc_insertion_point(field_get:clb.MemberAddress.address)
  return p != NULL ? *p : *reinterpret_cast<const ::clb::Address*>(
      &::clb::_Address_default_instance_);
}
inline ::clb::Address* MemberAddress::release_address() {
  // @@protoc_insertion_point(field_release:clb.MemberAddress.address)
  
  ::clb::Address* temp = address_;
  address_ = NULL;
  return temp;
}
inline ::clb::Address* MemberAddress::mutable_address() {
  
  if (address_ == NULL) {
    address_ = new ::clb::Address;
  }
  // @@protoc_insertion_point(field_mutable:clb.MemberAddress.address)
  return address_;
}
inline void MemberAddress::set_allocated_address(::clb::Address* address) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete address_;
  }
  if (address) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      address = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, address, submessage_arena);
    }
    
  } else {
    
  }
  address_ = address;
  // @@protoc_insertion_point(field_set_allocated:clb.MemberAddress.address)
}

// uint32 port = 2;
inline void MemberAddress::clear_port() {
  port_ = 0u;
}
inline ::google::protobuf::uint32 MemberAddress::port() const {
  // @@protoc_insertion_point(field_get:clb.MemberAddress.port)
  return port_;
}
inline void MemberAddress::set_port(::google::protobuf::uint32 value) {
  
  port_ = value;
  // @@protoc_insertion_point(field_set:clb.MemberAddress.port)
}

// -------------------------------------------------------------------

// MemberConfig

// float weight = 1;
inline void MemberConfig::clear_weight() {
  weight_ = 0;
}
inline float MemberConfig::weight() const {
  // @@protoc_insertion_point(field_get:clb.MemberConfig.weight)
  return weight_;
}
inline void MemberConfig::set_weight(float value) {
  
  weight_ = value;
  // @@protoc_insertion_point(field_set:clb.MemberConfig.weight)
}

// -------------------------------------------------------------------

// CreateVirtualServerRequest

// .clb.VirtualServerAddress address = 1;
inline bool CreateVirtualServerRequest::has_address() const {
  return this != internal_default_instance() && address_ != NULL;
}
inline void CreateVirtualServerRequest::clear_address() {
  if (GetArenaNoVirtual() == NULL && address_ != NULL) {
    delete address_;
  }
  address_ = NULL;
}
inline const ::clb::VirtualServerAddress& CreateVirtualServerRequest::address() const {
  const ::clb::VirtualServerAddress* p = address_;
  // @@protoc_insertion_point(field_get:clb.CreateVirtualServerRequest.address)
  return p != NULL ? *p : *reinterpret_cast<const ::clb::VirtualServerAddress*>(
      &::clb::_VirtualServerAddress_default_instance_);
}
inline ::clb::VirtualServerAddress* CreateVirtualServerRequest::release_address() {
  // @@protoc_insertion_point(field_release:clb.CreateVirtualServerRequest.address)
  
  ::clb::VirtualServerAddress* temp = address_;
  address_ = NULL;
  return temp;
}
inline ::clb::VirtualServerAddress* CreateVirtualServerRequest::mutable_address() {
  
  if (address_ == NULL) {
    address_ = new ::clb::VirtualServerAddress;
  }
  // @@protoc_insertion_point(field_mutable:clb.CreateVirtualServerRequest.address)
  return address_;
}
inline void CreateVirtualServerRequest::set_allocated_address(::clb::VirtualServerAddress* address) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete address_;
  }
  if (address) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      address = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, address, submessage_arena);
    }
    
  } else {
    
  }
  address_ = address;
  // @@protoc_insertion_point(field_set_allocated:clb.CreateVirtualServerRequest.address)
}

// .clb.VirtualServerConfig config = 2;
inline bool CreateVirtualServerRequest::has_config() const {
  return this != internal_default_instance() && config_ != NULL;
}
inline void CreateVirtualServerRequest::clear_config() {
  if (GetArenaNoVirtual() == NULL && config_ != NULL) {
    delete config_;
  }
  config_ = NULL;
}
inline const ::clb::VirtualServerConfig& CreateVirtualServerRequest::config() const {
  const ::clb::VirtualServerConfig* p = config_;
  // @@protoc_insertion_point(field_get:clb.CreateVirtualServerRequest.config)
  return p != NULL ? *p : *reinterpret_cast<const ::clb::VirtualServerConfig*>(
      &::clb::_VirtualServerConfig_default_instance_);
}
inline ::clb::VirtualServerConfig* CreateVirtualServerRequest::release_config() {
  // @@protoc_insertion_point(field_release:clb.CreateVirtualServerRequest.config)
  
  ::clb::VirtualServerConfig* temp = config_;
  config_ = NULL;
  return temp;
}
inline ::clb::VirtualServerConfig* CreateVirtualServerRequest::mutable_config() {
  
  if (config_ == NULL) {
    config_ = new ::clb::VirtualServerConfig;
  }
  // @@protoc_insertion_point(field_mutable:clb.CreateVirtualServerRequest.config)
  return config_;
}
inline void CreateVirtualServerRequest::set_allocated_config(::clb::VirtualServerConfig* config) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete config_;
  }
  if (config) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      config = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, config, submessage_arena);
    }
    
  } else {
    
  }
  config_ = config;
  // @@protoc_insertion_point(field_set_allocated:clb.CreateVirtualServerRequest.config)
}

// -------------------------------------------------------------------

// UpdateVirtualServerRequest

// .clb.VirtualServerAddress address = 1;
inline bool UpdateVirtualServerRequest::has_address() const {
  return this != internal_default_instance() && address_ != NULL;
}
inline void UpdateVirtualServerRequest::clear_address() {
  if (GetArenaNoVirtual() == NULL && address_ != NULL) {
    delete address_;
  }
  address_ = NULL;
}
inline const ::clb::VirtualServerAddress& UpdateVirtualServerRequest::address() const {
  const ::clb::VirtualServerAddress* p = address_;
  // @@protoc_insertion_point(field_get:clb.UpdateVirtualServerRequest.address)
  return p != NULL ? *p : *reinterpret_cast<const ::clb::VirtualServerAddress*>(
      &::clb::_VirtualServerAddress_default_instance_);
}
inline ::clb::VirtualServerAddress* UpdateVirtualServerRequest::release_address() {
  // @@protoc_insertion_point(field_release:clb.UpdateVirtualServerRequest.address)
  
  ::clb::VirtualServerAddress* temp = address_;
  address_ = NULL;
  return temp;
}
inline ::clb::VirtualServerAddress* UpdateVirtualServerRequest::mutable_address() {
  
  if (address_ == NULL) {
    address_ = new ::clb::VirtualServerAddress;
  }
  // @@protoc_insertion_point(field_mutable:clb.UpdateVirtualServerRequest.address)
  return address_;
}
inline void UpdateVirtualServerRequest::set_allocated_address(::clb::VirtualServerAddress* address) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete address_;
  }
  if (address) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      address = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, address, submessage_arena);
    }
    
  } else {
    
  }
  address_ = address;
  // @@protoc_insertion_point(field_set_allocated:clb.UpdateVirtualServerRequest.address)
}

// .clb.VirtualServerConfig config = 2;
inline bool UpdateVirtualServerRequest::has_config() const {
  return this != internal_default_instance() && config_ != NULL;
}
inline void UpdateVirtualServerRequest::clear_config() {
  if (GetArenaNoVirtual() == NULL && config_ != NULL) {
    delete config_;
  }
  config_ = NULL;
}
inline const ::clb::VirtualServerConfig& UpdateVirtualServerRequest::config() const {
  const ::clb::VirtualServerConfig* p = config_;
  // @@protoc_insertion_point(field_get:clb.UpdateVirtualServerRequest.config)
  return p != NULL ? *p : *reinterpret_cast<const ::clb::VirtualServerConfig*>(
      &::clb::_VirtualServerConfig_default_instance_);
}
inline ::clb::VirtualServerConfig* UpdateVirtualServerRequest::release_config() {
  // @@protoc_insertion_point(field_release:clb.UpdateVirtualServerRequest.config)
  
  ::clb::VirtualServerConfig* temp = config_;
  config_ = NULL;
  return temp;
}
inline ::clb::VirtualServerConfig* UpdateVirtualServerRequest::mutable_config() {
  
  if (config_ == NULL) {
    config_ = new ::clb::VirtualServerConfig;
  }
  // @@protoc_insertion_point(field_mutable:clb.UpdateVirtualServerRequest.config)
  return config_;
}
inline void UpdateVirtualServerRequest::set_allocated_config(::clb::VirtualServerConfig* config) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete config_;
  }
  if (config) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      config = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, config, submessage_arena);
    }
    
  } else {
    
  }
  config_ = config;
  // @@protoc_insertion_point(field_set_allocated:clb.UpdateVirtualServerRequest.config)
}

// -------------------------------------------------------------------

// DeleteVirtualServerRequest

// .clb.VirtualServerAddress address = 1;
inline bool DeleteVirtualServerRequest::has_address() const {
  return this != internal_default_instance() && address_ != NULL;
}
inline void DeleteVirtualServerRequest::clear_address() {
  if (GetArenaNoVirtual() == NULL && address_ != NULL) {
    delete address_;
  }
  address_ = NULL;
}
inline const ::clb::VirtualServerAddress& DeleteVirtualServerRequest::address() const {
  const ::clb::VirtualServerAddress* p = address_;
  // @@protoc_insertion_point(field_get:clb.DeleteVirtualServerRequest.address)
  return p != NULL ? *p : *reinterpret_cast<const ::clb::VirtualServerAddress*>(
      &::clb::_VirtualServerAddress_default_instance_);
}
inline ::clb::VirtualServerAddress* DeleteVirtualServerRequest::release_address() {
  // @@protoc_insertion_point(field_release:clb.DeleteVirtualServerRequest.address)
  
  ::clb::VirtualServerAddress* temp = address_;
  address_ = NULL;
  return temp;
}
inline ::clb::VirtualServerAddress* DeleteVirtualServerRequest::mutable_address() {
  
  if (address_ == NULL) {
    address_ = new ::clb::VirtualServerAddress;
  }
  // @@protoc_insertion_point(field_mutable:clb.DeleteVirtualServerRequest.address)
  return address_;
}
inline void DeleteVirtualServerRequest::set_allocated_address(::clb::VirtualServerAddress* address) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete address_;
  }
  if (address) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      address = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, address, submessage_arena);
    }
    
  } else {
    
  }
  address_ = address;
  // @@protoc_insertion_point(field_set_allocated:clb.DeleteVirtualServerRequest.address)
}

// -------------------------------------------------------------------

// AddMemberRequest

// .clb.VirtualServerAddress server = 1;
inline bool AddMemberRequest::has_server() const {
  return this != internal_default_instance() && server_ != NULL;
}
inline void AddMemberRequest::clear_server() {
  if (GetArenaNoVirtual() == NULL && server_ != NULL) {
    delete server_;
  }
  server_ = NULL;
}
inline const ::clb::VirtualServerAddress& AddMemberRequest::server() const {
  const ::clb::VirtualServerAddress* p = server_;
  // @@protoc_insertion_point(field_get:clb.AddMemberRequest.server)
  return p != NULL ? *p : *reinterpret_cast<const ::clb::VirtualServerAddress*>(
      &::clb::_VirtualServerAddress_default_instance_);
}
inline ::clb::VirtualServerAddress* AddMemberRequest::release_server() {
  // @@protoc_insertion_point(field_release:clb.AddMemberRequest.server)
  
  ::clb::VirtualServerAddress* temp = server_;
  server_ = NULL;
  return temp;
}
inline ::clb::VirtualServerAddress* AddMemberRequest::mutable_server() {
  
  if (server_ == NULL) {
    server_ = new ::clb::VirtualServerAddress;
  }
  // @@protoc_insertion_point(field_mutable:clb.AddMemberRequest.server)
  return server_;
}
inline void AddMemberRequest::set_allocated_server(::clb::VirtualServerAddress* server) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete server_;
  }
  if (server) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      server = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, server, submessage_arena);
    }
    
  } else {
    
  }
  server_ = server;
  // @@protoc_insertion_point(field_set_allocated:clb.AddMemberRequest.server)
}

// .clb.MemberAddress member = 2;
inline bool AddMemberRequest::has_member() const {
  return this != internal_default_instance() && member_ != NULL;
}
inline void AddMemberRequest::clear_member() {
  if (GetArenaNoVirtual() == NULL && member_ != NULL) {
    delete member_;
  }
  member_ = NULL;
}
inline const ::clb::MemberAddress& AddMemberRequest::member() const {
  const ::clb::MemberAddress* p = member_;
  // @@protoc_insertion_point(field_get:clb.AddMemberRequest.member)
  return p != NULL ? *p : *reinterpret_cast<const ::clb::MemberAddress*>(
      &::clb::_MemberAddress_default_instance_);
}
inline ::clb::MemberAddress* AddMemberRequest::release_member() {
  // @@protoc_insertion_point(field_release:clb.AddMemberRequest.member)
  
  ::clb::MemberAddress* temp = member_;
  member_ = NULL;
  return temp;
}
inline ::clb::MemberAddress* AddMemberRequest::mutable_member() {
  
  if (member_ == NULL) {
    member_ = new ::clb::MemberAddress;
  }
  // @@protoc_insertion_point(field_mutable:clb.AddMemberRequest.member)
  return member_;
}
inline void AddMemberRequest::set_allocated_member(::clb::MemberAddress* member) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete member_;
  }
  if (member) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      member = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, member, submessage_arena);
    }
    
  } else {
    
  }
  member_ = member;
  // @@protoc_insertion_point(field_set_allocated:clb.AddMemberRequest.member)
}

// .clb.MemberConfig config = 3;
inline bool AddMemberRequest::has_config() const {
  return this != internal_default_instance() && config_ != NULL;
}
inline void AddMemberRequest::clear_config() {
  if (GetArenaNoVirtual() == NULL && config_ != NULL) {
    delete config_;
  }
  config_ = NULL;
}
inline const ::clb::MemberConfig& AddMemberRequest::config() const {
  const ::clb::MemberConfig* p = config_;
  // @@protoc_insertion_point(field_get:clb.AddMemberRequest.config)
  return p != NULL ? *p : *reinterpret_cast<const ::clb::MemberConfig*>(
      &::clb::_MemberConfig_default_instance_);
}
inline ::clb::MemberConfig* AddMemberRequest::release_config() {
  // @@protoc_insertion_point(field_release:clb.AddMemberRequest.config)
  
  ::clb::MemberConfig* temp = config_;
  config_ = NULL;
  return temp;
}
inline ::clb::MemberConfig* AddMemberRequest::mutable_config() {
  
  if (config_ == NULL) {
    config_ = new ::clb::MemberConfig;
  }
  // @@protoc_insertion_point(field_mutable:clb.AddMemberRequest.config)
  return config_;
}
inline void AddMemberRequest::set_allocated_config(::clb::MemberConfig* config) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete config_;
  }
  if (config) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      config = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, config, submessage_arena);
    }
    
  } else {
    
  }
  config_ = config;
  // @@protoc_insertion_point(field_set_allocated:clb.AddMemberRequest.config)
}

// -------------------------------------------------------------------

// RemoveMemberRequest

// .clb.VirtualServerAddress server = 1;
inline bool RemoveMemberRequest::has_server() const {
  return this != internal_default_instance() && server_ != NULL;
}
inline void RemoveMemberRequest::clear_server() {
  if (GetArenaNoVirtual() == NULL && server_ != NULL) {
    delete server_;
  }
  server_ = NULL;
}
inline const ::clb::VirtualServerAddress& RemoveMemberRequest::server() const {
  const ::clb::VirtualServerAddress* p = server_;
  // @@protoc_insertion_point(field_get:clb.RemoveMemberRequest.server)
  return p != NULL ? *p : *reinterpret_cast<const ::clb::VirtualServerAddress*>(
      &::clb::_VirtualServerAddress_default_instance_);
}
inline ::clb::VirtualServerAddress* RemoveMemberRequest::release_server() {
  // @@protoc_insertion_point(field_release:clb.RemoveMemberRequest.server)
  
  ::clb::VirtualServerAddress* temp = server_;
  server_ = NULL;
  return temp;
}
inline ::clb::VirtualServerAddress* RemoveMemberRequest::mutable_server() {
  
  if (server_ == NULL) {
    server_ = new ::clb::VirtualServerAddress;
  }
  // @@protoc_insertion_point(field_mutable:clb.RemoveMemberRequest.server)
  return server_;
}
inline void RemoveMemberRequest::set_allocated_server(::clb::VirtualServerAddress* server) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete server_;
  }
  if (server) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      server = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, server, submessage_arena);
    }
    
  } else {
    
  }
  server_ = server;
  // @@protoc_insertion_point(field_set_allocated:clb.RemoveMemberRequest.server)
}

// .clb.MemberAddress member = 2;
inline bool RemoveMemberRequest::has_member() const {
  return this != internal_default_instance() && member_ != NULL;
}
inline void RemoveMemberRequest::clear_member() {
  if (GetArenaNoVirtual() == NULL && member_ != NULL) {
    delete member_;
  }
  member_ = NULL;
}
inline const ::clb::MemberAddress& RemoveMemberRequest::member() const {
  const ::clb::MemberAddress* p = member_;
  // @@protoc_insertion_point(field_get:clb.RemoveMemberRequest.member)
  return p != NULL ? *p : *reinterpret_cast<const ::clb::MemberAddress*>(
      &::clb::_MemberAddress_default_instance_);
}
inline ::clb::MemberAddress* RemoveMemberRequest::release_member() {
  // @@protoc_insertion_point(field_release:clb.RemoveMemberRequest.member)
  
  ::clb::MemberAddress* temp = member_;
  member_ = NULL;
  return temp;
}
inline ::clb::MemberAddress* RemoveMemberRequest::mutable_member() {
  
  if (member_ == NULL) {
    member_ = new ::clb::MemberAddress;
  }
  // @@protoc_insertion_point(field_mutable:clb.RemoveMemberRequest.member)
  return member_;
}
inline void RemoveMemberRequest::set_allocated_member(::clb::MemberAddress* member) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete member_;
  }
  if (member) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      member = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, member, submessage_arena);
    }
    
  } else {
    
  }
  member_ = member;
  // @@protoc_insertion_point(field_set_allocated:clb.RemoveMemberRequest.member)
}

// -------------------------------------------------------------------

// ChangeMemberRequest

// .clb.VirtualServerAddress server = 1;
inline bool ChangeMemberRequest::has_server() const {
  return this != internal_default_instance() && server_ != NULL;
}
inline void ChangeMemberRequest::clear_server() {
  if (GetArenaNoVirtual() == NULL && server_ != NULL) {
    delete server_;
  }
  server_ = NULL;
}
inline const ::clb::VirtualServerAddress& ChangeMemberRequest::server() const {
  const ::clb::VirtualServerAddress* p = server_;
  // @@protoc_insertion_point(field_get:clb.ChangeMemberRequest.server)
  return p != NULL ? *p : *reinterpret_cast<const ::clb::VirtualServerAddress*>(
      &::clb::_VirtualServerAddress_default_instance_);
}
inline ::clb::VirtualServerAddress* ChangeMemberRequest::release_server() {
  // @@protoc_insertion_point(field_release:clb.ChangeMemberRequest.server)
  
  ::clb::VirtualServerAddress* temp = server_;
  server_ = NULL;
  return temp;
}
inline ::clb::VirtualServerAddress* ChangeMemberRequest::mutable_server() {
  
  if (server_ == NULL) {
    server_ = new ::clb::VirtualServerAddress;
  }
  // @@protoc_insertion_point(field_mutable:clb.ChangeMemberRequest.server)
  return server_;
}
inline void ChangeMemberRequest::set_allocated_server(::clb::VirtualServerAddress* server) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete server_;
  }
  if (server) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      server = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, server, submessage_arena);
    }
    
  } else {
    
  }
  server_ = server;
  // @@protoc_insertion_point(field_set_allocated:clb.ChangeMemberRequest.server)
}

// .clb.MemberAddress member = 2;
inline bool ChangeMemberRequest::has_member() const {
  return this != internal_default_instance() && member_ != NULL;
}
inline void ChangeMemberRequest::clear_member() {
  if (GetArenaNoVirtual() == NULL && member_ != NULL) {
    delete member_;
  }
  member_ = NULL;
}
inline const ::clb::MemberAddress& ChangeMemberRequest::member() const {
  const ::clb::MemberAddress* p = member_;
  // @@protoc_insertion_point(field_get:clb.ChangeMemberRequest.member)
  return p != NULL ? *p : *reinterpret_cast<const ::clb::MemberAddress*>(
      &::clb::_MemberAddress_default_instance_);
}
inline ::clb::MemberAddress* ChangeMemberRequest::release_member() {
  // @@protoc_insertion_point(field_release:clb.ChangeMemberRequest.member)
  
  ::clb::MemberAddress* temp = member_;
  member_ = NULL;
  return temp;
}
inline ::clb::MemberAddress* ChangeMemberRequest::mutable_member() {
  
  if (member_ == NULL) {
    member_ = new ::clb::MemberAddress;
  }
  // @@protoc_insertion_point(field_mutable:clb.ChangeMemberRequest.member)
  return member_;
}
inline void ChangeMemberRequest::set_allocated_member(::clb::MemberAddress* member) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete member_;
  }
  if (member) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      member = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, member, submessage_arena);
    }
    
  } else {
    
  }
  member_ = member;
  // @@protoc_insertion_point(field_set_allocated:clb.ChangeMemberRequest.member)
}

// .clb.MemberConfig config = 3;
inline bool ChangeMemberRequest::has_config() const {
  return this != internal_default_instance() && config_ != NULL;
}
inline void ChangeMemberRequest::clear_config() {
  if (GetArenaNoVirtual() == NULL && config_ != NULL) {
    delete config_;
  }
  config_ = NULL;
}
inline const ::clb::MemberConfig& ChangeMemberRequest::config() const {
  const ::clb::MemberConfig* p = config_;
  // @@protoc_insertion_point(field_get:clb.ChangeMemberRequest.config)
  return p != NULL ? *p : *reinterpret_cast<const ::clb::MemberConfig*>(
      &::clb::_MemberConfig_default_instance_);
}
inline ::clb::MemberConfig* ChangeMemberRequest::release_config() {
  // @@protoc_insertion_point(field_release:clb.ChangeMemberRequest.config)
  
  ::clb::MemberConfig* temp = config_;
  config_ = NULL;
  return temp;
}
inline ::clb::MemberConfig* ChangeMemberRequest::mutable_config() {
  
  if (config_ == NULL) {
    config_ = new ::clb::MemberConfig;
  }
  // @@protoc_insertion_point(field_mutable:clb.ChangeMemberRequest.config)
  return config_;
}
inline void ChangeMemberRequest::set_allocated_config(::clb::MemberConfig* config) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete config_;
  }
  if (config) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      config = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, config, submessage_arena);
    }
    
  } else {
    
  }
  config_ = config;
  // @@protoc_insertion_point(field_set_allocated:clb.ChangeMemberRequest.config)
}

// -------------------------------------------------------------------

// Status

// uint32 code = 1;
inline void Status::clear_code() {
  code_ = 0u;
}
inline ::google::protobuf::uint32 Status::code() const {
  // @@protoc_insertion_point(field_get:clb.Status.code)
  return code_;
}
inline void Status::set_code(::google::protobuf::uint32 value) {
  
  code_ = value;
  // @@protoc_insertion_point(field_set:clb.Status.code)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace clb

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::clb::SocketType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::clb::SocketType>() {
  return ::clb::SocketType_descriptor();
}
template <> struct is_proto_enum< ::clb::BalancingAlgorithm> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::clb::BalancingAlgorithm>() {
  return ::clb::BalancingAlgorithm_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_netlink_2eproto__INCLUDED
